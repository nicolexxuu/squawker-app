{"ast":null,"code":"import { apiCall } from \"../../services/api\";\nimport { addError } from \"./errors\";\nimport { LOAD_MESSAGES, REMOVE_MESSAGE } from \"../actionTypes\";\nexport const loadMessages = messages => ({\n  type: LOAD_MESSAGES,\n  messages\n});\nexport const remove = id => ({\n  type: REMOVE_MESSAGE,\n  id\n});\nexport const removeMessage = (user_id, message_id) => {\n  return dispatch => {\n    return apiCall(\"delete\", `/api/users/${user_id}/messages/${message_id}`).then(() => dispatch(remove(message_id))).catch(err => dispatch(addError(err.message)));\n  };\n};\nexport const fetchMessages = () => {\n  return dispatch => {\n    return apiCall(\"get\", \"/api/messages\").then(res => {\n      dispatch(loadMessages(res));\n    }).catch(err => {\n      dispatch(addError(err.message));\n    });\n  };\n};\nexport const postNewMessage = (text, url) => (dispatch, getState) => {\n  let {\n    currentUser\n  } = getState();\n  const id = currentUser.user.id;\n  return apiCall(\"post\", `/api/users/${id}/messages`, {\n    text\n  }).then(res => {}).catch(err => dispatch(addError(err.message)));\n};","map":{"version":3,"names":["apiCall","addError","LOAD_MESSAGES","REMOVE_MESSAGE","loadMessages","messages","type","remove","id","removeMessage","user_id","message_id","dispatch","then","catch","err","message","fetchMessages","res","postNewMessage","text","url","getState","currentUser","user"],"sources":["C:/code/web-dev/warbler/warbler-client/src/store/actions/messages.js"],"sourcesContent":["import { apiCall } from \"../../services/api\";\r\nimport { addError } from \"./errors\";\r\nimport { LOAD_MESSAGES, REMOVE_MESSAGE } from \"../actionTypes\";\r\n\r\nexport const loadMessages = messages => ({\r\n    type: LOAD_MESSAGES,\r\n    messages\r\n});\r\n\r\nexport const remove = id => ({\r\n    type: REMOVE_MESSAGE,\r\n    id\r\n});\r\n\r\nexport const removeMessage = (user_id, message_id) => {\r\n    return dispatch => {\r\n        return apiCall(\"delete\", `/api/users/${user_id}/messages/${message_id}`)\r\n            .then(() => dispatch(remove(message_id)))\r\n            .catch(err => dispatch(addError(err.message)));\r\n    }\r\n}\r\n\r\nexport const fetchMessages = () => {\r\n    return dispatch => {\r\n        return apiCall(\"get\", \"/api/messages\")\r\n            .then(res => {\r\n                dispatch(loadMessages(res));\r\n            })\r\n            .catch(err => {\r\n                dispatch(addError(err.message))\r\n            });\r\n    };\r\n};\r\n\r\nexport const postNewMessage = (text, url) => (dispatch, getState) => {\r\n    let { currentUser } = getState();\r\n    const id = currentUser.user.id;\r\n    return apiCall(\"post\", `/api/users/${id}/messages`, { text })\r\n        .then(res => { })\r\n        .catch(err => dispatch(addError(err.message)))\r\n};"],"mappings":"AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,QAAQ,QAAQ,UAAU;AACnC,SAASC,aAAa,EAAEC,cAAc,QAAQ,gBAAgB;AAE9D,OAAO,MAAMC,YAAY,GAAGC,QAAQ,KAAK;EACrCC,IAAI,EAAEJ,aAAa;EACnBG;AACJ,CAAC,CAAC;AAEF,OAAO,MAAME,MAAM,GAAGC,EAAE,KAAK;EACzBF,IAAI,EAAEH,cAAc;EACpBK;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,aAAa,GAAGA,CAACC,OAAO,EAAEC,UAAU,KAAK;EAClD,OAAOC,QAAQ,IAAI;IACf,OAAOZ,OAAO,CAAC,QAAQ,EAAG,cAAaU,OAAQ,aAAYC,UAAW,EAAC,CAAC,CACnEE,IAAI,CAAC,MAAMD,QAAQ,CAACL,MAAM,CAACI,UAAU,CAAC,CAAC,CAAC,CACxCG,KAAK,CAACC,GAAG,IAAIH,QAAQ,CAACX,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;EACtD,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC/B,OAAOL,QAAQ,IAAI;IACf,OAAOZ,OAAO,CAAC,KAAK,EAAE,eAAe,CAAC,CACjCa,IAAI,CAACK,GAAG,IAAI;MACTN,QAAQ,CAACR,YAAY,CAACc,GAAG,CAAC,CAAC;IAC/B,CAAC,CAAC,CACDJ,KAAK,CAACC,GAAG,IAAI;MACVH,QAAQ,CAACX,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC,CAAC;IACnC,CAAC,CAAC;EACV,CAAC;AACL,CAAC;AAED,OAAO,MAAMG,cAAc,GAAGA,CAACC,IAAI,EAAEC,GAAG,KAAK,CAACT,QAAQ,EAAEU,QAAQ,KAAK;EACjE,IAAI;IAAEC;EAAY,CAAC,GAAGD,QAAQ,EAAE;EAChC,MAAMd,EAAE,GAAGe,WAAW,CAACC,IAAI,CAAChB,EAAE;EAC9B,OAAOR,OAAO,CAAC,MAAM,EAAG,cAAaQ,EAAG,WAAU,EAAE;IAAEY;EAAK,CAAC,CAAC,CACxDP,IAAI,CAACK,GAAG,IAAI,CAAE,CAAC,CAAC,CAChBJ,KAAK,CAACC,GAAG,IAAIH,QAAQ,CAACX,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;AACtD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}